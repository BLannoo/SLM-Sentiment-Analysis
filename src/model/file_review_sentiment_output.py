from enum import Enum
from langchain_core.pydantic_v1 import BaseModel


class SentimentEnum(Enum):
    VERY_POSITIVE = "Very positive"
    POSITIVE = "Positive"
    MIXED_POSITIVE = "Mixed positive"
    MIXED_NEGATIVE = "Mixed negative"
    NEGATIVE = "Negative"
    VERY_NEGATIVE = "Very negative"


class FilmReviewSentimentOutput(BaseModel):
    reasoning: str
    # `execution_sentiment` is typed as `str` instead of `SentimentEnum` because
    # it is generated by the LLM. While the LLM is instructed to use the six predefined
    # sentiments, there may be cases where it outputs values that do not conform
    # to these requirements. We need to handle such cases flexibly.
    execution_sentiment: str

    def escaped_reasoning(self) -> str:
        return self.reasoning.replace("\n", "\\n")
